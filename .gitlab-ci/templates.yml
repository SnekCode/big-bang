include:
  # "Default" AWS Networking
  - local: '/.gitlab-ci/jobs/networking/aws/.gitlab-ci.yml'

  # Clusters in CI
  - local: '/.gitlab-ci/jobs/ci-cluster/.gitlab-ci.yml'

  # RKE2 Gitlab CI jobs
  - local: '/.gitlab-ci/jobs/rke2/.gitlab-ci.yml'

#-----------------------------------------------------------------------------------------------------------------------
# Gitlab Runner tag templates
#

.bigbang-gitlab-runner-tags:
  tags:
    - bigbang
    - dogfood
    - generic

.kubectl-output:
  image: registry.dso.mil/platform-one/big-bang/pipeline-templates/pipeline-templates/k8s-ci:v1.20.4-bb.3
  extends: .bigbang-gitlab-runner-tags
  after_script:
    - FAILED_PODS=$(kubectl get pods -A | awk '$4!="Running"')
    - |
      if [ -n $FAILED_PODS ];then
        echo -e "\e[31mWARNING: The following pods are not running:\e[31m"
        echo $FAILED_PODS
        echo "test"
      fi
    - echo -e "\e[0Ksection_start:`date +%s`:kubectl_get_all[collapsed=true]\r\e[0K\e[33;1mkubectl get all -A\e[37m"
    - kubectl get all -A
    - echo -e "\e[0Ksection_end:`date +%s`:kubectl_get_all\r\e[0K"
    - echo -e "\e[0Ksection_start:`date +%s`:kubectl_get_helmrelease[collapsed=true]\r\e[0K\e[33;1mkubectl get helmrelease -A\e[37m"
    - kubectl get helmrelease -A
    - echo -e "\e[0Ksection_end:`date +%s`:kubectl_get_helmrelease\r\e[0K"

.terraformer:
  image:
    name: registry.dso.mil/platform-one/big-bang/pipeline-templates/pipeline-templates/terraform:0.13.5
    entrypoint:
      - /usr/bin/env
      - "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
  interruptible: false
  variables:
    TF_IN_AUTOMATION: "1"
    TF_VAR_ci_pipeline_url: $CI_PIPELINE_URL
  before_script:
    - echo -e "\e[0Ksection_start:`date +%s`:terraform_init[collapsed=true]\r\e[0K\e[33;1mTerraform Init\e[37m"
    - echo "$TF_VAR_env"
    - cd ${CI_PROJECT_DIR}/${TF_ROOT}
    - terraform version
    - terraform init -input=false
    # Loop to retry terraform workspace creation due to issues locking terraform.state in s3
    - |
      set -e
      attempt_counter=0
      max_attempts=5
      until [ $(terraform workspace select $TF_VAR_env >/dev/null || terraform workspace new $TF_VAR_env >/dev/null; echo $?) -eq 0 ]; do
        if [ ${attempt_counter} -eq ${max_attempts} ];then
          echo "Error creating workspace"
          exit 1
        fi
        attempt_counter=$(($attempt_counter+1))
        sleep 5
      done
    - terraform validate
    - echo -e "\e[0Ksection_end:`date +%s`:terraform_init\r\e[0K"

.terraform destroy workspace:
  after_script:
    - echo -e "\e[0Ksection_start:`date +%s`:terraform_destroy_workspace[collapsed=true]\r\e[0K\e[33;1mTerraform Destroy Workspace\e[37m"
    - cd ${CI_PROJECT_DIR}/${TF_ROOT}
    # Loop to retry terraform workspace destory
    - |
      set -e
      attempt_counter=0
      max_attempts=2
      until [ $(terraform workspace select default >/dev/null && terraform workspace delete "${TF_VAR_env}" >/dev/null; echo $?) -eq 0 ]; do
        if [ ${attempt_counter} == ${max_attempts} ];then
          echo "Error destroying terraform workspace"
          exit 1
        fi
        attempt_counter=$(($attempt_counter+1))
        echo "Attempt failed to destroy workspace will retry in 30 seconds"
        sleep 30
      done
    - echo -e "\e[0Ksection_end:`date +%s`:terraform_destroy_workspace\r\e[0K"